
# For more information about using CMake with Android Studio, read the
# documentation: https://d.android.com/studio/projects/add-native-code.html

# Sets the minimum version of CMake required to build the native library.

cmake_minimum_required(VERSION 3.18.1)

# Declares and names the project.

project("kxffmpeg")

set(ffmpeg_lib_dir ${CMAKE_SOURCE_DIR}/../libs/${ANDROID_ABI})
set(ffmpeg_head_dir ${CMAKE_SOURCE_DIR}/include)
include_directories(${ffmpeg_head_dir})

# Creates and names a library, sets it as either STATIC
# or SHARED, and provides the relative paths to its source code.
# You can define multiple libraries, and CMake builds them for you.
# Gradle automatically packages shared libraries with your APK.
# 添加ffmpeg相关的so库
add_library(libavutil
SHARED
IMPORTED )
set_target_properties(libavutil
PROPERTIES IMPORTED_LOCATION
${ffmpeg_lib_dir}/libavutil.so )

add_library(libswresample
SHARED
IMPORTED )
set_target_properties(libswresample
PROPERTIES IMPORTED_LOCATION
${ffmpeg_lib_dir}/libswresample.so )

add_library(libavresample
        SHARED
        IMPORTED )
set_target_properties(libavresample
        PROPERTIES IMPORTED_LOCATION
        ${ffmpeg_lib_dir}/libavresample.so )

add_library(libavcodec
SHARED
IMPORTED )
set_target_properties(libavcodec
PROPERTIES IMPORTED_LOCATION
${ffmpeg_lib_dir}/libavcodec.so )

add_library(libavfilter
SHARED
IMPORTED)
set_target_properties(libavfilter
PROPERTIES IMPORTED_LOCATION
${ffmpeg_lib_dir}/libavfilter.so )

add_library(libswscale
SHARED
IMPORTED)
set_target_properties(libswscale
PROPERTIES IMPORTED_LOCATION
${ffmpeg_lib_dir}/libswscale.so )

add_library(libavformat
SHARED
IMPORTED)
set_target_properties(libavformat
PROPERTIES IMPORTED_LOCATION
${ffmpeg_lib_dir}/libavformat.so )

add_library(libavdevice
SHARED
IMPORTED)
set_target_properties(libavdevice
PROPERTIES IMPORTED_LOCATION
${ffmpeg_lib_dir}/libavdevice.so )

add_library( # Sets the name of the library.
             kxffmpeg

             # Sets the library as a shared library.
             SHARED

             # Provides a relative path to your source file(s).
        h264player.cpp
        kxffmpeg.cpp)

# Searches for a specified prebuilt library and stores the path as a
# variable. Because CMake includes system libraries in the search path by
# default, you only need to specify the name of the public NDK library
# you want to add. CMake verifies that the library exists before
# completing its build.

find_library( # Sets the name of the path variable.
              log-lib

              # Specifies the name of the NDK library that
              # you want CMake to locate.
              log )

# Specifies libraries CMake should link to your target library. You
# can link multiple libraries, such as libraries you define in this
# build script, prebuilt third-party libraries, or system libraries.

target_link_libraries( # Specifies the target library.
                       kxffmpeg

                        #连接 FFmpeg 相关的库
                        libavutil
                        libswresample
                        libavresample
                        libavcodec
                        libavfilter
                        libswscale
                        libavformat
                        libavdevice

                       # Links the target library to the log library
                       # included in the NDK.
                       ${log-lib} )
